name       = MongoDB
author     = Florian Ragwitz <rafl@debian.org>
author     = Kristina Chodorow <kristina@mongodb.org>
author     = Mike Friedman <friedo@mongodb.com>
author     = David Golden <david.golden@mongodb.org>
license    = Apache_2_0
copyright_holder = MongoDB, Inc.

; true for non-indexed -TRIAL development releases, false for stable releases
; leave true until ready for a stable release, then set false, release and
; reset to true
is_trial = 1

; *** BeforeBuild phase ***
; none

; *** FileGatherer phase ***

; gather all files tracked with git
[Git::GatherDir]

; generate a MANIFEST
[Manifest]

; generate a README
[Readme]

;[License]

; --- t tests ---

; add generated test to show versions of all dependencies
[Test::ReportPrereqs]

; --- xt tests ---

; ensure all .pm files compile, in case any aren't loaded in test files
;[Test::Compile]
;fake_home = 1
;xt_mode = 1

; ensure we're backwards compatible to 5.008
[Test::MinimumVersion]
max_target_perl = 5.008

; ensure all .pm files have a $VERSION set
[Test::Version]

; check Pod syntax
[PodSyntaxTests]

; check spelling
;[Test::PodSpelling]

; check Pod coverage
;[PodCoverageTests]

; check Perl::Critic
;[Test::Perl::Critic]

;[Test::LocalBrew]
;brews         = perl-5.10.1
;brews         = perl-5.12.1
;brews         = perl-5.14.2
;brews         = perl-5.16.0

; *** EncodingProvider phase ***

; provide file encoding hints to prevent binary files from being analyzed
; as textual data
[Encoding]
encoding = bytes
filename = t/img.png

; *** FilePruner phase ***

; remove typical set of files we don't want
[PruneCruft]

; *** FileMunger phase ***

; RewriteVersion is both a VersionProvider and FileMunger
; VersionProvider: set $VERSION from main module
; FileMunger: munge $VERSION to dist version in gathered files
[RewriteVersion]

; Add boilerplate Pod to all modules and rewrite custom Pod extensions.
; The replacer settings minimize any line-number changes in code
[PodWeaver]
:version = 4.005
replacer = replace_with_comment
post_code_replacer = replace_with_nothing

; *** PrereqSource phase ***

; Add pre-configuration requirements to META so that Makefile.PL will run
[Prereqs / ConfigureRequires]
Config::AutoConf = 0.22
Path::Tiny = 0.052

; Detect prerequisites from code and tests
[AutoPrereqs]
skip = ^MongoDB::

; *** MetaProvider phase

; Set homepage and repository metadata fields from the 'origin' remote,
; which is assumed to be from Github.
[GithubMeta]

; Set bugtracker metadata to point to jira so search.cpan.org and
; metacpan.org will link there instead of rt.cpan.org
[Bugtracker]
web           = https://jira.mongodb.org/browse/PERL

; Set 'no_index' metadata to hint that modules in these directories
; must not be indexed by PAUSE
[MetaNoIndex]
directory = inc
directory = t
directory = xt

; generate 'provides' metadata, which controls how PAUSE indexes
; our modules; use 'no_index' to mask packages reported
[MetaProvides::Package]
meta_noindex = 1

; *** InstallTool phase ***

; use our provided Makefile.PL
[MakeMaker::Custom]

; Actually a TestRunner helper plugin, but needs to come after
; MakeMaker::Custom; conditionally run xt/ tests during dzil test or dzil
; release;
[RunExtraTests]
default_jobs = 9

; generate META.yml and META.json files
[MetaYAML]
[MetaJSON]

; *** AfterBuild phase ***
; none

; *** BeforeArchive phase ***
; none

; *** BeforeRelease phase ***

; make sure we're using correct version number format
[CheckStrictVersion]
tuple_only = 1

; check for dirty files or files not covered by version control;
; dist.ini and Changes are allowed to be dirty and will get
; committed later after release
[Git::Check]

; ensure META has 'resources' data
[CheckMetaResources]

; ensure prereqs are on CPAN
[CheckPrereqsIndexed]

; ensure Changes has been updated
[CheckChangesHasContent]

; check tests before release or abort
[TestRelease]

; prompt user before uploading to CPAN
[ConfirmRelease]

; *** Releaser phase ***

; uploads to cpan; credentials must be in the specified file
[UploadToCPAN]
:version = 5.015
pause_cfg_file = .pause-mongodb

; if we want to do a release without actually uploading, comment out
; UploadToCPAN and uncomment this
;[FakeRelease]

; *** AfterRelease phase ***

; commit source files as of "dzil release" with any
; allowable modifications (i.e. Changes and dist.ini)
[Git::Commit / Commit_Dirty_Files]

; tag repo as of "dzil release"
[Git::Tag]
tag_format    = %v
tag_message   = Version %v

; NextRelease is both a FileMunger and AfterRelease plugin.
; Before release, it will write version and timestamp to Changes.
; After release, it will write the {{$NEXT}} marker to Changes
; for the next release cycle.
;
; It must come in dist.ini *after* first Git::Commit and before
; the second one so that it acts at the right time after release
[NextRelease]

; increment $VERSION in source .pm files
[BumpVersionAfterRelease]

; commit source files after modification
[Git::Commit / Commit_Updated_Files]
allow_dirty_match = ^lib/
commit_msg = Commit Changes and bump $VERSION

; push commits and tags to 'origin' repo
[Git::Push]
push_to         = origin
